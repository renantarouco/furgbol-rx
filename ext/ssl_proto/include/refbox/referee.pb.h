// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: referee.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_referee_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_referee_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "game_event.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_referee_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_referee_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_referee_2eproto;
class SSL_Referee;
class SSL_RefereeDefaultTypeInternal;
extern SSL_RefereeDefaultTypeInternal _SSL_Referee_default_instance_;
class SSL_Referee_Point;
class SSL_Referee_PointDefaultTypeInternal;
extern SSL_Referee_PointDefaultTypeInternal _SSL_Referee_Point_default_instance_;
class SSL_Referee_TeamInfo;
class SSL_Referee_TeamInfoDefaultTypeInternal;
extern SSL_Referee_TeamInfoDefaultTypeInternal _SSL_Referee_TeamInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SSL_Referee* Arena::CreateMaybeMessage<::SSL_Referee>(Arena*);
template<> ::SSL_Referee_Point* Arena::CreateMaybeMessage<::SSL_Referee_Point>(Arena*);
template<> ::SSL_Referee_TeamInfo* Arena::CreateMaybeMessage<::SSL_Referee_TeamInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum SSL_Referee_Stage : int {
  SSL_Referee_Stage_NORMAL_FIRST_HALF_PRE = 0,
  SSL_Referee_Stage_NORMAL_FIRST_HALF = 1,
  SSL_Referee_Stage_NORMAL_HALF_TIME = 2,
  SSL_Referee_Stage_NORMAL_SECOND_HALF_PRE = 3,
  SSL_Referee_Stage_NORMAL_SECOND_HALF = 4,
  SSL_Referee_Stage_EXTRA_TIME_BREAK = 5,
  SSL_Referee_Stage_EXTRA_FIRST_HALF_PRE = 6,
  SSL_Referee_Stage_EXTRA_FIRST_HALF = 7,
  SSL_Referee_Stage_EXTRA_HALF_TIME = 8,
  SSL_Referee_Stage_EXTRA_SECOND_HALF_PRE = 9,
  SSL_Referee_Stage_EXTRA_SECOND_HALF = 10,
  SSL_Referee_Stage_PENALTY_SHOOTOUT_BREAK = 11,
  SSL_Referee_Stage_PENALTY_SHOOTOUT = 12,
  SSL_Referee_Stage_POST_GAME = 13
};
bool SSL_Referee_Stage_IsValid(int value);
constexpr SSL_Referee_Stage SSL_Referee_Stage_Stage_MIN = SSL_Referee_Stage_NORMAL_FIRST_HALF_PRE;
constexpr SSL_Referee_Stage SSL_Referee_Stage_Stage_MAX = SSL_Referee_Stage_POST_GAME;
constexpr int SSL_Referee_Stage_Stage_ARRAYSIZE = SSL_Referee_Stage_Stage_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SSL_Referee_Stage_descriptor();
template<typename T>
inline const std::string& SSL_Referee_Stage_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SSL_Referee_Stage>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SSL_Referee_Stage_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SSL_Referee_Stage_descriptor(), enum_t_value);
}
inline bool SSL_Referee_Stage_Parse(
    const std::string& name, SSL_Referee_Stage* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SSL_Referee_Stage>(
    SSL_Referee_Stage_descriptor(), name, value);
}
enum SSL_Referee_Command : int {
  SSL_Referee_Command_HALT = 0,
  SSL_Referee_Command_STOP = 1,
  SSL_Referee_Command_NORMAL_START = 2,
  SSL_Referee_Command_FORCE_START = 3,
  SSL_Referee_Command_PREPARE_KICKOFF_YELLOW = 4,
  SSL_Referee_Command_PREPARE_KICKOFF_BLUE = 5,
  SSL_Referee_Command_PREPARE_PENALTY_YELLOW = 6,
  SSL_Referee_Command_PREPARE_PENALTY_BLUE = 7,
  SSL_Referee_Command_DIRECT_FREE_YELLOW = 8,
  SSL_Referee_Command_DIRECT_FREE_BLUE = 9,
  SSL_Referee_Command_INDIRECT_FREE_YELLOW = 10,
  SSL_Referee_Command_INDIRECT_FREE_BLUE = 11,
  SSL_Referee_Command_TIMEOUT_YELLOW = 12,
  SSL_Referee_Command_TIMEOUT_BLUE = 13,
  SSL_Referee_Command_GOAL_YELLOW = 14,
  SSL_Referee_Command_GOAL_BLUE = 15,
  SSL_Referee_Command_BALL_PLACEMENT_YELLOW = 16,
  SSL_Referee_Command_BALL_PLACEMENT_BLUE = 17
};
bool SSL_Referee_Command_IsValid(int value);
constexpr SSL_Referee_Command SSL_Referee_Command_Command_MIN = SSL_Referee_Command_HALT;
constexpr SSL_Referee_Command SSL_Referee_Command_Command_MAX = SSL_Referee_Command_BALL_PLACEMENT_BLUE;
constexpr int SSL_Referee_Command_Command_ARRAYSIZE = SSL_Referee_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SSL_Referee_Command_descriptor();
template<typename T>
inline const std::string& SSL_Referee_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SSL_Referee_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SSL_Referee_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SSL_Referee_Command_descriptor(), enum_t_value);
}
inline bool SSL_Referee_Command_Parse(
    const std::string& name, SSL_Referee_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SSL_Referee_Command>(
    SSL_Referee_Command_descriptor(), name, value);
}
// ===================================================================

class SSL_Referee_TeamInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSL_Referee.TeamInfo) */ {
 public:
  SSL_Referee_TeamInfo();
  virtual ~SSL_Referee_TeamInfo();

  SSL_Referee_TeamInfo(const SSL_Referee_TeamInfo& from);
  SSL_Referee_TeamInfo(SSL_Referee_TeamInfo&& from) noexcept
    : SSL_Referee_TeamInfo() {
    *this = ::std::move(from);
  }

  inline SSL_Referee_TeamInfo& operator=(const SSL_Referee_TeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_Referee_TeamInfo& operator=(SSL_Referee_TeamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSL_Referee_TeamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSL_Referee_TeamInfo* internal_default_instance() {
    return reinterpret_cast<const SSL_Referee_TeamInfo*>(
               &_SSL_Referee_TeamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SSL_Referee_TeamInfo* other);
  friend void swap(SSL_Referee_TeamInfo& a, SSL_Referee_TeamInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SSL_Referee_TeamInfo* New() const final {
    return CreateMaybeMessage<SSL_Referee_TeamInfo>(nullptr);
  }

  SSL_Referee_TeamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSL_Referee_TeamInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSL_Referee_TeamInfo& from);
  void MergeFrom(const SSL_Referee_TeamInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_Referee_TeamInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSL_Referee.TeamInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_referee_2eproto);
    return ::descriptor_table_referee_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 yellow_card_times = 4 [packed = true];
  int yellow_card_times_size() const;
  void clear_yellow_card_times();
  static const int kYellowCardTimesFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 yellow_card_times(int index) const;
  void set_yellow_card_times(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_yellow_card_times(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      yellow_card_times() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_yellow_card_times();

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required uint32 score = 2;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 red_cards = 3;
  bool has_red_cards() const;
  void clear_red_cards();
  static const int kRedCardsFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 red_cards() const;
  void set_red_cards(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 yellow_cards = 5;
  bool has_yellow_cards() const;
  void clear_yellow_cards();
  static const int kYellowCardsFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 yellow_cards() const;
  void set_yellow_cards(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 timeouts = 6;
  bool has_timeouts() const;
  void clear_timeouts();
  static const int kTimeoutsFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeouts() const;
  void set_timeouts(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 timeout_time = 7;
  bool has_timeout_time() const;
  void clear_timeout_time();
  static const int kTimeoutTimeFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_time() const;
  void set_timeout_time(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 goalie = 8;
  bool has_goalie() const;
  void clear_goalie();
  static const int kGoalieFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint32 goalie() const;
  void set_goalie(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:SSL_Referee.TeamInfo)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > yellow_card_times_;
  mutable std::atomic<int> _yellow_card_times_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 score_;
  ::PROTOBUF_NAMESPACE_ID::uint32 red_cards_;
  ::PROTOBUF_NAMESPACE_ID::uint32 yellow_cards_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeouts_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 goalie_;
  friend struct ::TableStruct_referee_2eproto;
};
// -------------------------------------------------------------------

class SSL_Referee_Point :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSL_Referee.Point) */ {
 public:
  SSL_Referee_Point();
  virtual ~SSL_Referee_Point();

  SSL_Referee_Point(const SSL_Referee_Point& from);
  SSL_Referee_Point(SSL_Referee_Point&& from) noexcept
    : SSL_Referee_Point() {
    *this = ::std::move(from);
  }

  inline SSL_Referee_Point& operator=(const SSL_Referee_Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_Referee_Point& operator=(SSL_Referee_Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSL_Referee_Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSL_Referee_Point* internal_default_instance() {
    return reinterpret_cast<const SSL_Referee_Point*>(
               &_SSL_Referee_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SSL_Referee_Point* other);
  friend void swap(SSL_Referee_Point& a, SSL_Referee_Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SSL_Referee_Point* New() const final {
    return CreateMaybeMessage<SSL_Referee_Point>(nullptr);
  }

  SSL_Referee_Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSL_Referee_Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSL_Referee_Point& from);
  void MergeFrom(const SSL_Referee_Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_Referee_Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSL_Referee.Point";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_referee_2eproto);
    return ::descriptor_table_referee_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:SSL_Referee.Point)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  friend struct ::TableStruct_referee_2eproto;
};
// -------------------------------------------------------------------

class SSL_Referee :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSL_Referee) */ {
 public:
  SSL_Referee();
  virtual ~SSL_Referee();

  SSL_Referee(const SSL_Referee& from);
  SSL_Referee(SSL_Referee&& from) noexcept
    : SSL_Referee() {
    *this = ::std::move(from);
  }

  inline SSL_Referee& operator=(const SSL_Referee& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_Referee& operator=(SSL_Referee&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSL_Referee& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSL_Referee* internal_default_instance() {
    return reinterpret_cast<const SSL_Referee*>(
               &_SSL_Referee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SSL_Referee* other);
  friend void swap(SSL_Referee& a, SSL_Referee& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SSL_Referee* New() const final {
    return CreateMaybeMessage<SSL_Referee>(nullptr);
  }

  SSL_Referee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSL_Referee>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSL_Referee& from);
  void MergeFrom(const SSL_Referee& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_Referee* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSL_Referee";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_referee_2eproto);
    return ::descriptor_table_referee_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SSL_Referee_TeamInfo TeamInfo;
  typedef SSL_Referee_Point Point;

  typedef SSL_Referee_Stage Stage;
  static constexpr Stage NORMAL_FIRST_HALF_PRE =
    SSL_Referee_Stage_NORMAL_FIRST_HALF_PRE;
  static constexpr Stage NORMAL_FIRST_HALF =
    SSL_Referee_Stage_NORMAL_FIRST_HALF;
  static constexpr Stage NORMAL_HALF_TIME =
    SSL_Referee_Stage_NORMAL_HALF_TIME;
  static constexpr Stage NORMAL_SECOND_HALF_PRE =
    SSL_Referee_Stage_NORMAL_SECOND_HALF_PRE;
  static constexpr Stage NORMAL_SECOND_HALF =
    SSL_Referee_Stage_NORMAL_SECOND_HALF;
  static constexpr Stage EXTRA_TIME_BREAK =
    SSL_Referee_Stage_EXTRA_TIME_BREAK;
  static constexpr Stage EXTRA_FIRST_HALF_PRE =
    SSL_Referee_Stage_EXTRA_FIRST_HALF_PRE;
  static constexpr Stage EXTRA_FIRST_HALF =
    SSL_Referee_Stage_EXTRA_FIRST_HALF;
  static constexpr Stage EXTRA_HALF_TIME =
    SSL_Referee_Stage_EXTRA_HALF_TIME;
  static constexpr Stage EXTRA_SECOND_HALF_PRE =
    SSL_Referee_Stage_EXTRA_SECOND_HALF_PRE;
  static constexpr Stage EXTRA_SECOND_HALF =
    SSL_Referee_Stage_EXTRA_SECOND_HALF;
  static constexpr Stage PENALTY_SHOOTOUT_BREAK =
    SSL_Referee_Stage_PENALTY_SHOOTOUT_BREAK;
  static constexpr Stage PENALTY_SHOOTOUT =
    SSL_Referee_Stage_PENALTY_SHOOTOUT;
  static constexpr Stage POST_GAME =
    SSL_Referee_Stage_POST_GAME;
  static inline bool Stage_IsValid(int value) {
    return SSL_Referee_Stage_IsValid(value);
  }
  static constexpr Stage Stage_MIN =
    SSL_Referee_Stage_Stage_MIN;
  static constexpr Stage Stage_MAX =
    SSL_Referee_Stage_Stage_MAX;
  static constexpr int Stage_ARRAYSIZE =
    SSL_Referee_Stage_Stage_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Stage_descriptor() {
    return SSL_Referee_Stage_descriptor();
  }
  template<typename T>
  static inline const std::string& Stage_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Stage>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Stage_Name.");
    return SSL_Referee_Stage_Name(enum_t_value);
  }
  static inline bool Stage_Parse(const std::string& name,
      Stage* value) {
    return SSL_Referee_Stage_Parse(name, value);
  }

  typedef SSL_Referee_Command Command;
  static constexpr Command HALT =
    SSL_Referee_Command_HALT;
  static constexpr Command STOP =
    SSL_Referee_Command_STOP;
  static constexpr Command NORMAL_START =
    SSL_Referee_Command_NORMAL_START;
  static constexpr Command FORCE_START =
    SSL_Referee_Command_FORCE_START;
  static constexpr Command PREPARE_KICKOFF_YELLOW =
    SSL_Referee_Command_PREPARE_KICKOFF_YELLOW;
  static constexpr Command PREPARE_KICKOFF_BLUE =
    SSL_Referee_Command_PREPARE_KICKOFF_BLUE;
  static constexpr Command PREPARE_PENALTY_YELLOW =
    SSL_Referee_Command_PREPARE_PENALTY_YELLOW;
  static constexpr Command PREPARE_PENALTY_BLUE =
    SSL_Referee_Command_PREPARE_PENALTY_BLUE;
  static constexpr Command DIRECT_FREE_YELLOW =
    SSL_Referee_Command_DIRECT_FREE_YELLOW;
  static constexpr Command DIRECT_FREE_BLUE =
    SSL_Referee_Command_DIRECT_FREE_BLUE;
  static constexpr Command INDIRECT_FREE_YELLOW =
    SSL_Referee_Command_INDIRECT_FREE_YELLOW;
  static constexpr Command INDIRECT_FREE_BLUE =
    SSL_Referee_Command_INDIRECT_FREE_BLUE;
  static constexpr Command TIMEOUT_YELLOW =
    SSL_Referee_Command_TIMEOUT_YELLOW;
  static constexpr Command TIMEOUT_BLUE =
    SSL_Referee_Command_TIMEOUT_BLUE;
  static constexpr Command GOAL_YELLOW =
    SSL_Referee_Command_GOAL_YELLOW;
  static constexpr Command GOAL_BLUE =
    SSL_Referee_Command_GOAL_BLUE;
  static constexpr Command BALL_PLACEMENT_YELLOW =
    SSL_Referee_Command_BALL_PLACEMENT_YELLOW;
  static constexpr Command BALL_PLACEMENT_BLUE =
    SSL_Referee_Command_BALL_PLACEMENT_BLUE;
  static inline bool Command_IsValid(int value) {
    return SSL_Referee_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    SSL_Referee_Command_Command_MIN;
  static constexpr Command Command_MAX =
    SSL_Referee_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    SSL_Referee_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return SSL_Referee_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return SSL_Referee_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(const std::string& name,
      Command* value) {
    return SSL_Referee_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .SSL_Referee.TeamInfo yellow = 7;
  bool has_yellow() const;
  void clear_yellow();
  static const int kYellowFieldNumber = 7;
  const ::SSL_Referee_TeamInfo& yellow() const;
  ::SSL_Referee_TeamInfo* release_yellow();
  ::SSL_Referee_TeamInfo* mutable_yellow();
  void set_allocated_yellow(::SSL_Referee_TeamInfo* yellow);

  // required .SSL_Referee.TeamInfo blue = 8;
  bool has_blue() const;
  void clear_blue();
  static const int kBlueFieldNumber = 8;
  const ::SSL_Referee_TeamInfo& blue() const;
  ::SSL_Referee_TeamInfo* release_blue();
  ::SSL_Referee_TeamInfo* mutable_blue();
  void set_allocated_blue(::SSL_Referee_TeamInfo* blue);

  // optional .SSL_Referee.Point designated_position = 9;
  bool has_designated_position() const;
  void clear_designated_position();
  static const int kDesignatedPositionFieldNumber = 9;
  const ::SSL_Referee_Point& designated_position() const;
  ::SSL_Referee_Point* release_designated_position();
  ::SSL_Referee_Point* mutable_designated_position();
  void set_allocated_designated_position(::SSL_Referee_Point* designated_position);

  // optional .SSL_Referee_Game_Event gameEvent = 11;
  bool has_gameevent() const;
  void clear_gameevent();
  static const int kGameEventFieldNumber = 11;
  const ::SSL_Referee_Game_Event& gameevent() const;
  ::SSL_Referee_Game_Event* release_gameevent();
  ::SSL_Referee_Game_Event* mutable_gameevent();
  void set_allocated_gameevent(::SSL_Referee_Game_Event* gameevent);

  // required uint64 packet_timestamp = 1;
  bool has_packet_timestamp() const;
  void clear_packet_timestamp();
  static const int kPacketTimestampFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 packet_timestamp() const;
  void set_packet_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required .SSL_Referee.Stage stage = 2;
  bool has_stage() const;
  void clear_stage();
  static const int kStageFieldNumber = 2;
  ::SSL_Referee_Stage stage() const;
  void set_stage(::SSL_Referee_Stage value);

  // optional sint32 stage_time_left = 3;
  bool has_stage_time_left() const;
  void clear_stage_time_left();
  static const int kStageTimeLeftFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 stage_time_left() const;
  void set_stage_time_left(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required .SSL_Referee.Command command = 4;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 4;
  ::SSL_Referee_Command command() const;
  void set_command(::SSL_Referee_Command value);

  // required uint32 command_counter = 5;
  bool has_command_counter() const;
  void clear_command_counter();
  static const int kCommandCounterFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 command_counter() const;
  void set_command_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint64 command_timestamp = 6;
  bool has_command_timestamp() const;
  void clear_command_timestamp();
  static const int kCommandTimestampFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint64 command_timestamp() const;
  void set_command_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional bool blueTeamOnPositiveHalf = 10;
  bool has_blueteamonpositivehalf() const;
  void clear_blueteamonpositivehalf();
  static const int kBlueTeamOnPositiveHalfFieldNumber = 10;
  bool blueteamonpositivehalf() const;
  void set_blueteamonpositivehalf(bool value);

  // @@protoc_insertion_point(class_scope:SSL_Referee)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::SSL_Referee_TeamInfo* yellow_;
  ::SSL_Referee_TeamInfo* blue_;
  ::SSL_Referee_Point* designated_position_;
  ::SSL_Referee_Game_Event* gameevent_;
  ::PROTOBUF_NAMESPACE_ID::uint64 packet_timestamp_;
  int stage_;
  ::PROTOBUF_NAMESPACE_ID::int32 stage_time_left_;
  int command_;
  ::PROTOBUF_NAMESPACE_ID::uint32 command_counter_;
  ::PROTOBUF_NAMESPACE_ID::uint64 command_timestamp_;
  bool blueteamonpositivehalf_;
  friend struct ::TableStruct_referee_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SSL_Referee_TeamInfo

// required string name = 1;
inline bool SSL_Referee_TeamInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSL_Referee_TeamInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SSL_Referee_TeamInfo::name() const {
  // @@protoc_insertion_point(field_get:SSL_Referee.TeamInfo.name)
  return name_.GetNoArena();
}
inline void SSL_Referee_TeamInfo::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SSL_Referee.TeamInfo.name)
}
inline void SSL_Referee_TeamInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SSL_Referee.TeamInfo.name)
}
inline void SSL_Referee_TeamInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SSL_Referee.TeamInfo.name)
}
inline void SSL_Referee_TeamInfo::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SSL_Referee.TeamInfo.name)
}
inline std::string* SSL_Referee_TeamInfo::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:SSL_Referee.TeamInfo.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSL_Referee_TeamInfo::release_name() {
  // @@protoc_insertion_point(field_release:SSL_Referee.TeamInfo.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSL_Referee_TeamInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SSL_Referee.TeamInfo.name)
}

// required uint32 score = 2;
inline bool SSL_Referee_TeamInfo::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSL_Referee_TeamInfo::clear_score() {
  score_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSL_Referee_TeamInfo::score() const {
  // @@protoc_insertion_point(field_get:SSL_Referee.TeamInfo.score)
  return score_;
}
inline void SSL_Referee_TeamInfo::set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  score_ = value;
  // @@protoc_insertion_point(field_set:SSL_Referee.TeamInfo.score)
}

// required uint32 red_cards = 3;
inline bool SSL_Referee_TeamInfo::has_red_cards() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SSL_Referee_TeamInfo::clear_red_cards() {
  red_cards_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSL_Referee_TeamInfo::red_cards() const {
  // @@protoc_insertion_point(field_get:SSL_Referee.TeamInfo.red_cards)
  return red_cards_;
}
inline void SSL_Referee_TeamInfo::set_red_cards(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  red_cards_ = value;
  // @@protoc_insertion_point(field_set:SSL_Referee.TeamInfo.red_cards)
}

// repeated uint32 yellow_card_times = 4 [packed = true];
inline int SSL_Referee_TeamInfo::yellow_card_times_size() const {
  return yellow_card_times_.size();
}
inline void SSL_Referee_TeamInfo::clear_yellow_card_times() {
  yellow_card_times_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSL_Referee_TeamInfo::yellow_card_times(int index) const {
  // @@protoc_insertion_point(field_get:SSL_Referee.TeamInfo.yellow_card_times)
  return yellow_card_times_.Get(index);
}
inline void SSL_Referee_TeamInfo::set_yellow_card_times(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  yellow_card_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:SSL_Referee.TeamInfo.yellow_card_times)
}
inline void SSL_Referee_TeamInfo::add_yellow_card_times(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  yellow_card_times_.Add(value);
  // @@protoc_insertion_point(field_add:SSL_Referee.TeamInfo.yellow_card_times)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SSL_Referee_TeamInfo::yellow_card_times() const {
  // @@protoc_insertion_point(field_list:SSL_Referee.TeamInfo.yellow_card_times)
  return yellow_card_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SSL_Referee_TeamInfo::mutable_yellow_card_times() {
  // @@protoc_insertion_point(field_mutable_list:SSL_Referee.TeamInfo.yellow_card_times)
  return &yellow_card_times_;
}

// required uint32 yellow_cards = 5;
inline bool SSL_Referee_TeamInfo::has_yellow_cards() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SSL_Referee_TeamInfo::clear_yellow_cards() {
  yellow_cards_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSL_Referee_TeamInfo::yellow_cards() const {
  // @@protoc_insertion_point(field_get:SSL_Referee.TeamInfo.yellow_cards)
  return yellow_cards_;
}
inline void SSL_Referee_TeamInfo::set_yellow_cards(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  yellow_cards_ = value;
  // @@protoc_insertion_point(field_set:SSL_Referee.TeamInfo.yellow_cards)
}

// required uint32 timeouts = 6;
inline bool SSL_Referee_TeamInfo::has_timeouts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SSL_Referee_TeamInfo::clear_timeouts() {
  timeouts_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSL_Referee_TeamInfo::timeouts() const {
  // @@protoc_insertion_point(field_get:SSL_Referee.TeamInfo.timeouts)
  return timeouts_;
}
inline void SSL_Referee_TeamInfo::set_timeouts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  timeouts_ = value;
  // @@protoc_insertion_point(field_set:SSL_Referee.TeamInfo.timeouts)
}

// required uint32 timeout_time = 7;
inline bool SSL_Referee_TeamInfo::has_timeout_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SSL_Referee_TeamInfo::clear_timeout_time() {
  timeout_time_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSL_Referee_TeamInfo::timeout_time() const {
  // @@protoc_insertion_point(field_get:SSL_Referee.TeamInfo.timeout_time)
  return timeout_time_;
}
inline void SSL_Referee_TeamInfo::set_timeout_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  timeout_time_ = value;
  // @@protoc_insertion_point(field_set:SSL_Referee.TeamInfo.timeout_time)
}

// required uint32 goalie = 8;
inline bool SSL_Referee_TeamInfo::has_goalie() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SSL_Referee_TeamInfo::clear_goalie() {
  goalie_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSL_Referee_TeamInfo::goalie() const {
  // @@protoc_insertion_point(field_get:SSL_Referee.TeamInfo.goalie)
  return goalie_;
}
inline void SSL_Referee_TeamInfo::set_goalie(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  goalie_ = value;
  // @@protoc_insertion_point(field_set:SSL_Referee.TeamInfo.goalie)
}

// -------------------------------------------------------------------

// SSL_Referee_Point

// required float x = 1;
inline bool SSL_Referee_Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSL_Referee_Point::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float SSL_Referee_Point::x() const {
  // @@protoc_insertion_point(field_get:SSL_Referee.Point.x)
  return x_;
}
inline void SSL_Referee_Point::set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:SSL_Referee.Point.x)
}

// required float y = 2;
inline bool SSL_Referee_Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSL_Referee_Point::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float SSL_Referee_Point::y() const {
  // @@protoc_insertion_point(field_get:SSL_Referee.Point.y)
  return y_;
}
inline void SSL_Referee_Point::set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:SSL_Referee.Point.y)
}

// -------------------------------------------------------------------

// SSL_Referee

// required uint64 packet_timestamp = 1;
inline bool SSL_Referee::has_packet_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SSL_Referee::clear_packet_timestamp() {
  packet_timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SSL_Referee::packet_timestamp() const {
  // @@protoc_insertion_point(field_get:SSL_Referee.packet_timestamp)
  return packet_timestamp_;
}
inline void SSL_Referee::set_packet_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  packet_timestamp_ = value;
  // @@protoc_insertion_point(field_set:SSL_Referee.packet_timestamp)
}

// required .SSL_Referee.Stage stage = 2;
inline bool SSL_Referee::has_stage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SSL_Referee::clear_stage() {
  stage_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::SSL_Referee_Stage SSL_Referee::stage() const {
  // @@protoc_insertion_point(field_get:SSL_Referee.stage)
  return static_cast< ::SSL_Referee_Stage >(stage_);
}
inline void SSL_Referee::set_stage(::SSL_Referee_Stage value) {
  assert(::SSL_Referee_Stage_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  stage_ = value;
  // @@protoc_insertion_point(field_set:SSL_Referee.stage)
}

// optional sint32 stage_time_left = 3;
inline bool SSL_Referee::has_stage_time_left() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SSL_Referee::clear_stage_time_left() {
  stage_time_left_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSL_Referee::stage_time_left() const {
  // @@protoc_insertion_point(field_get:SSL_Referee.stage_time_left)
  return stage_time_left_;
}
inline void SSL_Referee::set_stage_time_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  stage_time_left_ = value;
  // @@protoc_insertion_point(field_set:SSL_Referee.stage_time_left)
}

// required .SSL_Referee.Command command = 4;
inline bool SSL_Referee::has_command() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SSL_Referee::clear_command() {
  command_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::SSL_Referee_Command SSL_Referee::command() const {
  // @@protoc_insertion_point(field_get:SSL_Referee.command)
  return static_cast< ::SSL_Referee_Command >(command_);
}
inline void SSL_Referee::set_command(::SSL_Referee_Command value) {
  assert(::SSL_Referee_Command_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  command_ = value;
  // @@protoc_insertion_point(field_set:SSL_Referee.command)
}

// required uint32 command_counter = 5;
inline bool SSL_Referee::has_command_counter() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SSL_Referee::clear_command_counter() {
  command_counter_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSL_Referee::command_counter() const {
  // @@protoc_insertion_point(field_get:SSL_Referee.command_counter)
  return command_counter_;
}
inline void SSL_Referee::set_command_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  command_counter_ = value;
  // @@protoc_insertion_point(field_set:SSL_Referee.command_counter)
}

// required uint64 command_timestamp = 6;
inline bool SSL_Referee::has_command_timestamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SSL_Referee::clear_command_timestamp() {
  command_timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SSL_Referee::command_timestamp() const {
  // @@protoc_insertion_point(field_get:SSL_Referee.command_timestamp)
  return command_timestamp_;
}
inline void SSL_Referee::set_command_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  command_timestamp_ = value;
  // @@protoc_insertion_point(field_set:SSL_Referee.command_timestamp)
}

// required .SSL_Referee.TeamInfo yellow = 7;
inline bool SSL_Referee::has_yellow() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSL_Referee::clear_yellow() {
  if (yellow_ != nullptr) yellow_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::SSL_Referee_TeamInfo& SSL_Referee::yellow() const {
  const ::SSL_Referee_TeamInfo* p = yellow_;
  // @@protoc_insertion_point(field_get:SSL_Referee.yellow)
  return p != nullptr ? *p : *reinterpret_cast<const ::SSL_Referee_TeamInfo*>(
      &::_SSL_Referee_TeamInfo_default_instance_);
}
inline ::SSL_Referee_TeamInfo* SSL_Referee::release_yellow() {
  // @@protoc_insertion_point(field_release:SSL_Referee.yellow)
  _has_bits_[0] &= ~0x00000001u;
  ::SSL_Referee_TeamInfo* temp = yellow_;
  yellow_ = nullptr;
  return temp;
}
inline ::SSL_Referee_TeamInfo* SSL_Referee::mutable_yellow() {
  _has_bits_[0] |= 0x00000001u;
  if (yellow_ == nullptr) {
    auto* p = CreateMaybeMessage<::SSL_Referee_TeamInfo>(GetArenaNoVirtual());
    yellow_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SSL_Referee.yellow)
  return yellow_;
}
inline void SSL_Referee::set_allocated_yellow(::SSL_Referee_TeamInfo* yellow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete yellow_;
  }
  if (yellow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      yellow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yellow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  yellow_ = yellow;
  // @@protoc_insertion_point(field_set_allocated:SSL_Referee.yellow)
}

// required .SSL_Referee.TeamInfo blue = 8;
inline bool SSL_Referee::has_blue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSL_Referee::clear_blue() {
  if (blue_ != nullptr) blue_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::SSL_Referee_TeamInfo& SSL_Referee::blue() const {
  const ::SSL_Referee_TeamInfo* p = blue_;
  // @@protoc_insertion_point(field_get:SSL_Referee.blue)
  return p != nullptr ? *p : *reinterpret_cast<const ::SSL_Referee_TeamInfo*>(
      &::_SSL_Referee_TeamInfo_default_instance_);
}
inline ::SSL_Referee_TeamInfo* SSL_Referee::release_blue() {
  // @@protoc_insertion_point(field_release:SSL_Referee.blue)
  _has_bits_[0] &= ~0x00000002u;
  ::SSL_Referee_TeamInfo* temp = blue_;
  blue_ = nullptr;
  return temp;
}
inline ::SSL_Referee_TeamInfo* SSL_Referee::mutable_blue() {
  _has_bits_[0] |= 0x00000002u;
  if (blue_ == nullptr) {
    auto* p = CreateMaybeMessage<::SSL_Referee_TeamInfo>(GetArenaNoVirtual());
    blue_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SSL_Referee.blue)
  return blue_;
}
inline void SSL_Referee::set_allocated_blue(::SSL_Referee_TeamInfo* blue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete blue_;
  }
  if (blue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blue, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  blue_ = blue;
  // @@protoc_insertion_point(field_set_allocated:SSL_Referee.blue)
}

// optional .SSL_Referee.Point designated_position = 9;
inline bool SSL_Referee::has_designated_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SSL_Referee::clear_designated_position() {
  if (designated_position_ != nullptr) designated_position_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::SSL_Referee_Point& SSL_Referee::designated_position() const {
  const ::SSL_Referee_Point* p = designated_position_;
  // @@protoc_insertion_point(field_get:SSL_Referee.designated_position)
  return p != nullptr ? *p : *reinterpret_cast<const ::SSL_Referee_Point*>(
      &::_SSL_Referee_Point_default_instance_);
}
inline ::SSL_Referee_Point* SSL_Referee::release_designated_position() {
  // @@protoc_insertion_point(field_release:SSL_Referee.designated_position)
  _has_bits_[0] &= ~0x00000004u;
  ::SSL_Referee_Point* temp = designated_position_;
  designated_position_ = nullptr;
  return temp;
}
inline ::SSL_Referee_Point* SSL_Referee::mutable_designated_position() {
  _has_bits_[0] |= 0x00000004u;
  if (designated_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::SSL_Referee_Point>(GetArenaNoVirtual());
    designated_position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SSL_Referee.designated_position)
  return designated_position_;
}
inline void SSL_Referee::set_allocated_designated_position(::SSL_Referee_Point* designated_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete designated_position_;
  }
  if (designated_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      designated_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, designated_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  designated_position_ = designated_position;
  // @@protoc_insertion_point(field_set_allocated:SSL_Referee.designated_position)
}

// optional bool blueTeamOnPositiveHalf = 10;
inline bool SSL_Referee::has_blueteamonpositivehalf() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SSL_Referee::clear_blueteamonpositivehalf() {
  blueteamonpositivehalf_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool SSL_Referee::blueteamonpositivehalf() const {
  // @@protoc_insertion_point(field_get:SSL_Referee.blueTeamOnPositiveHalf)
  return blueteamonpositivehalf_;
}
inline void SSL_Referee::set_blueteamonpositivehalf(bool value) {
  _has_bits_[0] |= 0x00000400u;
  blueteamonpositivehalf_ = value;
  // @@protoc_insertion_point(field_set:SSL_Referee.blueTeamOnPositiveHalf)
}

// optional .SSL_Referee_Game_Event gameEvent = 11;
inline bool SSL_Referee::has_gameevent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::SSL_Referee_Game_Event& SSL_Referee::gameevent() const {
  const ::SSL_Referee_Game_Event* p = gameevent_;
  // @@protoc_insertion_point(field_get:SSL_Referee.gameEvent)
  return p != nullptr ? *p : *reinterpret_cast<const ::SSL_Referee_Game_Event*>(
      &::_SSL_Referee_Game_Event_default_instance_);
}
inline ::SSL_Referee_Game_Event* SSL_Referee::release_gameevent() {
  // @@protoc_insertion_point(field_release:SSL_Referee.gameEvent)
  _has_bits_[0] &= ~0x00000008u;
  ::SSL_Referee_Game_Event* temp = gameevent_;
  gameevent_ = nullptr;
  return temp;
}
inline ::SSL_Referee_Game_Event* SSL_Referee::mutable_gameevent() {
  _has_bits_[0] |= 0x00000008u;
  if (gameevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::SSL_Referee_Game_Event>(GetArenaNoVirtual());
    gameevent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SSL_Referee.gameEvent)
  return gameevent_;
}
inline void SSL_Referee::set_allocated_gameevent(::SSL_Referee_Game_Event* gameevent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gameevent_);
  }
  if (gameevent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gameevent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gameevent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  gameevent_ = gameevent;
  // @@protoc_insertion_point(field_set_allocated:SSL_Referee.gameEvent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SSL_Referee_Stage> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SSL_Referee_Stage>() {
  return ::SSL_Referee_Stage_descriptor();
}
template <> struct is_proto_enum< ::SSL_Referee_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SSL_Referee_Command>() {
  return ::SSL_Referee_Command_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_referee_2eproto
